{"ast":null,"code":"var _JSON$stringify = require(\"@babel/runtime-corejs2/core-js/json/stringify\");\n\nvar _Promise = require(\"@babel/runtime-corejs2/core-js/promise\");\n\nvar CryptoJS = require(\"crypto-js\");\n\nmodule.exports = {\n  save: function save(userId, key, value) {\n    return new _Promise(function (resolve, reject) {\n      try {\n        var data = {\n          value: value\n        };\n        var data2 = CryptoJS.AES.encrypt(_JSON$stringify(data), \"ISOFHCARE\");\n        localStorage.setItem(userId + \"_\" + key, data2.toString());\n        resolve(true);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  },\n  read: function read(userId, key, defaultValue) {\n    if (localStorage.hasOwnProperty(userId + \"_\" + key)) {\n      var item = localStorage.getItem(userId + \"_\" + key);\n      var item = CryptoJS.AES.decrypt(item, \"ISOFHCARE\").toString(CryptoJS.enc.Utf8);\n      if (item) try {\n        var data = JSON.parse(item);\n\n        if (data && data.value) {\n          return data.value;\n        }\n      } catch (error) {}\n    }\n\n    return defaultValue;\n  }\n};","map":{"version":3,"sources":["E:/iSofh/source/project-react-js-device-management/src/data-access/datacache-provider.js"],"names":["CryptoJS","require","module","exports","save","userId","key","value","resolve","reject","data","data2","AES","encrypt","localStorage","setItem","toString","error","read","defaultValue","hasOwnProperty","item","getItem","decrypt","enc","Utf8","JSON","parse"],"mappings":";;;;AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IADa,gBACRC,MADQ,EACAC,GADA,EACKC,KADL,EACY;AACrB,WAAO,aAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,UAAI;AACA,YAAIC,IAAI,GAAG;AACPH,UAAAA,KAAK,EAALA;AADO,SAAX;AAGA,YAAII,KAAK,GAAGX,QAAQ,CAACY,GAAT,CAAaC,OAAb,CAAqB,gBAAeH,IAAf,CAArB,EAA2C,WAA3C,CAAZ;AACAI,QAAAA,YAAY,CAACC,OAAb,CAAqBV,MAAM,GAAG,GAAT,GAAeC,GAApC,EAAyCK,KAAK,CAACK,QAAN,EAAzC;AACAR,QAAAA,OAAO,CAAC,IAAD,CAAP;AACH,OAPD,CAOE,OAAOS,KAAP,EAAc;AACZR,QAAAA,MAAM,CAACQ,KAAD,CAAN;AACH;AACJ,KAXM,CAAP;AAYH,GAdY;AAebC,EAAAA,IAfa,gBAeRb,MAfQ,EAeAC,GAfA,EAeKa,YAfL,EAemB;AAC5B,QAAIL,YAAY,CAACM,cAAb,CAA4Bf,MAAM,GAAG,GAAT,GAAeC,GAA3C,CAAJ,EAAqD;AACjD,UAAIe,IAAI,GAAGP,YAAY,CAACQ,OAAb,CAAqBjB,MAAM,GAAG,GAAT,GAAeC,GAApC,CAAX;AACA,UAAIe,IAAI,GAAGrB,QAAQ,CAACY,GAAT,CAAaW,OAAb,CAAqBF,IAArB,EAA2B,WAA3B,EAAwCL,QAAxC,CAAiDhB,QAAQ,CAACwB,GAAT,CAAaC,IAA9D,CAAX;AACA,UAAIJ,IAAJ,EACI,IAAI;AACA,YAAIX,IAAI,GAAGgB,IAAI,CAACC,KAAL,CAAWN,IAAX,CAAX;;AACA,YAAIX,IAAI,IAAIA,IAAI,CAACH,KAAjB,EAAwB;AACpB,iBAAOG,IAAI,CAACH,KAAZ;AACH;AACJ,OALD,CAKE,OAAOU,KAAP,EAAc,CACf;AACR;;AACD,WAAQE,YAAR;AACH;AA7BY,CAAjB","sourcesContent":["var CryptoJS = require(\"crypto-js\");\r\nmodule.exports = {\r\n    save(userId, key, value) {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                var data = {\r\n                    value\r\n                };\r\n                let data2 = CryptoJS.AES.encrypt(JSON.stringify(data), \"ISOFHCARE\");\r\n                localStorage.setItem(userId + \"_\" + key, data2.toString());\r\n                resolve(true);\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        })\r\n    },\r\n    read(userId, key, defaultValue) {\r\n        if (localStorage.hasOwnProperty(userId + \"_\" + key)) {\r\n            var item = localStorage.getItem(userId + \"_\" + key);\r\n            var item = CryptoJS.AES.decrypt(item, \"ISOFHCARE\").toString(CryptoJS.enc.Utf8);\r\n            if (item)\r\n                try {\r\n                    var data = JSON.parse(item);\r\n                    if (data && data.value) {\r\n                        return data.value;\r\n                    }\r\n                } catch (error) {\r\n                }\r\n        }\r\n        return (defaultValue);\r\n    }\r\n}"]},"metadata":{},"sourceType":"script"}