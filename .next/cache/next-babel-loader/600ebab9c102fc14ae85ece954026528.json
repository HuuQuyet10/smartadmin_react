{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport constants from \"@strings\";\nimport snackbar from \"@utils/snackbar-utils\";\nimport stringUtils from \"mainam-react-native-string-utils\";\nimport clientUtils from \"@utils/client-utils\";\nimport userProvider from '@data-access/user-provider';\n\nfunction onLogin(username, password) {\n  return (dispath, getState) => {\n    if (!username || !password) {\n      snackbar.show(\"Vui lòng nhập tài khoản và mật khẩu\", \"danger\");\n      return;\n    }\n\n    return new _Promise((resolve, reject) => {\n      userProvider.login(username, password).then(res => {\n        debugger;\n\n        switch (res.code) {\n          case 0:\n            snackbar.show(\"Đăng nhập thành công\", \"success\");\n            dispath(updateData({\n              auth: res.data,\n              detail: null\n            }));\n            clientUtils.auth = res.data.access_token || \"\";\n            resolve(res.data);\n            break;\n\n          default:\n            snackbar.show(res.message || constants.text.user.login_error, \"danger\");\n            break;\n        }\n\n        reject(\"Đăng nhập không thành công\");\n      }).catch(e => {\n        reject(e);\n        console.log(e);\n      });\n    });\n  };\n}\n\nfunction updateData(data) {\n  return dispatch => {\n    dispatch({\n      type: \"AUTH-UPDATE-DATA\",\n      data: data\n    });\n  };\n}\n\nexport default {\n  onLogin,\n\n  onLogout() {\n    return dispatch => {\n      return new _Promise((resolve, reject) => {\n        dispatch(updateData({\n          auth: null,\n          detail: null\n        }));\n        clientUtils.auth = null;\n        resolve();\n      });\n    };\n  },\n\n  updateData\n};","map":{"version":3,"sources":["E:/iSofh/source/project-react-js-device-management/src/redux-store/actions/auth/index.js"],"names":["constants","snackbar","stringUtils","clientUtils","userProvider","onLogin","username","password","dispath","getState","show","resolve","reject","login","then","res","code","updateData","auth","data","detail","access_token","message","text","user","login_error","catch","e","console","log","dispatch","type","onLogout"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,UAAtB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,WAAP,MAAwB,kCAAxB;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;;AAEA,SAASC,OAAT,CAAiBC,QAAjB,EAA2BC,QAA3B,EAAqC;AACnC,SAAO,CAACC,OAAD,EAAUC,QAAV,KAAuB;AAC5B,QAAI,CAACH,QAAD,IAAa,CAACC,QAAlB,EAA4B;AAC1BN,MAAAA,QAAQ,CAACS,IAAT,CAAc,qCAAd,EAAoD,QAApD;AACA;AACD;;AACD,WAAO,aAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCR,MAAAA,YAAY,CACTS,KADH,CACSP,QADT,EACmBC,QADnB,EAEGO,IAFH,CAEQC,GAAG,IAAI;AACX;;AACA,gBAAQA,GAAG,CAACC,IAAZ;AACE,eAAK,CAAL;AACEf,YAAAA,QAAQ,CAACS,IAAT,CAAc,sBAAd,EAAsC,SAAtC;AACAF,YAAAA,OAAO,CACLS,UAAU,CAAC;AACTC,cAAAA,IAAI,EAAEH,GAAG,CAACI,IADD;AAETC,cAAAA,MAAM,EAAE;AAFC,aAAD,CADL,CAAP;AAMAjB,YAAAA,WAAW,CAACe,IAAZ,GAAmBH,GAAG,CAACI,IAAJ,CAASE,YAAT,IAAyB,EAA5C;AACAV,YAAAA,OAAO,CAACI,GAAG,CAACI,IAAL,CAAP;AACA;;AACF;AACElB,YAAAA,QAAQ,CAACS,IAAT,CACEK,GAAG,CAACO,OAAJ,IAAetB,SAAS,CAACuB,IAAV,CAAeC,IAAf,CAAoBC,WADrC,EAEE,QAFF;AAIA;AAjBJ;;AAmBAb,QAAAA,MAAM,CAAC,4BAAD,CAAN;AACD,OAxBH,EAyBGc,KAzBH,CAyBSC,CAAC,IAAI;AACVf,QAAAA,MAAM,CAACe,CAAD,CAAN;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD,OA5BH;AA6BD,KA9BM,CAAP;AA+BD,GApCD;AAqCD;;AAED,SAASV,UAAT,CAAoBE,IAApB,EAA0B;AACxB,SAAOW,QAAQ,IAAI;AACjBA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAE,kBADC;AAEPZ,MAAAA,IAAI,EAAEA;AAFC,KAAD,CAAR;AAID,GALD;AAMD;;AACD,eAAe;AACbd,EAAAA,OADa;;AAEb2B,EAAAA,QAAQ,GAAG;AACT,WAAOF,QAAQ,IAAI;AACjB,aAAO,aAAY,CAACnB,OAAD,EAAUC,MAAV,KAAqB;AACtCkB,QAAAA,QAAQ,CACNb,UAAU,CAAC;AACTC,UAAAA,IAAI,EAAE,IADG;AAETE,UAAAA,MAAM,EAAE;AAFC,SAAD,CADJ,CAAR;AAMAjB,QAAAA,WAAW,CAACe,IAAZ,GAAmB,IAAnB;AACAP,QAAAA,OAAO;AACR,OATM,CAAP;AAUD,KAXD;AAYD,GAfY;;AAgBbM,EAAAA;AAhBa,CAAf","sourcesContent":["import constants from \"@strings\";\r\nimport snackbar from \"@utils/snackbar-utils\";\r\nimport stringUtils from \"mainam-react-native-string-utils\";\r\nimport clientUtils from \"@utils/client-utils\";\r\nimport userProvider from '@data-access/user-provider';\r\n\r\nfunction onLogin(username, password) {\r\n  return (dispath, getState) => {\r\n    if (!username || !password) {\r\n      snackbar.show(\"Vui lòng nhập tài khoản và mật khẩu\",\"danger\");\r\n      return;\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n      userProvider\r\n        .login(username, password)\r\n        .then(res => {\r\n          debugger;\r\n          switch (res.code) {\r\n            case 0:\r\n              snackbar.show(\"Đăng nhập thành công\", \"success\");\r\n              dispath(\r\n                updateData({\r\n                  auth: res.data,\r\n                  detail: null\r\n                })\r\n              );\r\n              clientUtils.auth = res.data.access_token || \"\";\r\n              resolve(res.data);\r\n              break;\r\n            default:\r\n              snackbar.show(\r\n                res.message || constants.text.user.login_error,\r\n                \"danger\"\r\n              );\r\n              break;\r\n          }\r\n          reject(\"Đăng nhập không thành công\");\r\n        })\r\n        .catch(e => {\r\n          reject(e);\r\n          console.log(e);\r\n        });\r\n    });\r\n  };\r\n}\r\n\r\nfunction updateData(data) {\r\n  return dispatch => {\r\n    dispatch({\r\n      type: \"AUTH-UPDATE-DATA\",\r\n      data: data\r\n    });\r\n  };\r\n}\r\nexport default {\r\n  onLogin,\r\n  onLogout() {\r\n    return dispatch => {\r\n      return new Promise((resolve, reject) => {\r\n        dispatch(\r\n          updateData({\r\n            auth: null,\r\n            detail: null\r\n          })\r\n        );\r\n        clientUtils.auth = null;\r\n        resolve();\r\n      });\r\n    };\r\n  },\r\n  updateData\r\n};\r\n"]},"metadata":{},"sourceType":"module"}